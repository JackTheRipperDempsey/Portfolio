//
// Grammar definition (CUP) file of a 
//   small procedural language
//

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java.util.ArrayList;
import java.util.TreeMap;


parser code {:

       int errorCount = 0;
       static int MAX_ERRORS = 20; 
              
       // Debugging
       public void dbg(String msg) {
          // Uncomment to turn debugging back on 
       	   System.err.println(msg); 
       }

       // Driver should give us an ErrorReport object that we can 
       // share with the scanner and other phases.  If it doesn't, we'll 
       // print to StdErr. 
       ErrorReport report = null; 
       public void setErrorReport( ErrorReport _report) {
       	      report = _report; 
       }
       
       public void syntax_error(java_cup.runtime.Symbol cur_token) {
           ComplexSymbolFactory.ComplexSymbol the_token =
	      (ComplexSymbolFactory.ComplexSymbol) cur_token; 
	   report_error("Syntax error in line " +
			the_token.xleft.getLine() +
			", near column " +
			the_token.xleft.getColumn(),  null);
	   ++ errorCount; 
	   if (errorCount > MAX_ERRORS) {
	       System.err.println("More than " + MAX_ERRORS + " errors. " + 
				"Giving up"); 
	       done_parsing(); 
	       System.exit(1); 
	   }
       }

       // Overrides default error reporting
       public void report_error(String msg, Object ignored) {
       	     if (report == null) {
	        System.err.println(msg); 
	     } else {
	        report.err(msg); 
             }
       }

       // Convenience form
       public void report_error(String msg) {
       	      report_error(msg, null); 
       }

:}

// ====   Terminal symbols (interface to JFlex) ========

// Punctuation 

terminal LBRACE, RBRACE, SEMI, COLON, ASSIGN, COMMA ;
terminal DOT, AT, LPAREN, RPAREN; 
terminal STRING TIMES, DIV, PLUS, MINUS ;
terminal STRING LEQ, LT, EQ, NOT, NEG; 
terminal RIGHTARROW; 

// Keywords
terminal CLASS, INHERITS, IF, THEN, ELSE, FI, WHILE, DO, OD, LET, IN ;
terminal CASE, OF, ESAC; 
terminal NEW, ISVOID;
terminal LOOP, POOL;


// Literals

terminal TRUE, FALSE;
terminal Integer INTLIT;
terminal String STRINGLIT;

// Identifiers

terminal String ID;        // Identifier (variable name)
terminal String TYPEID;    // Type (class) name

// ====   Non-terminal symbols (defined by CUP grammar below) ====
//        (write the grammar, then add symbols to this list) 

nonterminal RootNode	program;
nonterminal ArrayList<ClassNode>	classes;
nonterminal ClassNode	clazz;
nonterminal MethodNode	method;
nonterminal ASTNode	field;
nonterminal String	optParent;
nonterminal ArrayList<ASTNode>	features;
nonterminal ArrayList<ASTNode>	exprs;
nonterminal ASTNode	expr;
nonterminal ArrayList<ASTNode>	semiexpr;
nonterminal ASTNode	let;
nonterminal ASTNode	innerLet;
nonterminal TreeMap<String,String>	formal;
nonterminal TreeMap<String,String>	formals;
nonterminal ComplexSymbolFactory.ComplexSymbol	binop;
nonterminal ComplexSymbolFactory.ComplexSymbol	unop;
nonterminal AssignNode	assignment;
nonterminal ArrayList<AssignNode>	assignments;
nonterminal ArrayList<ASTNode>	rarrows;
nonterminal ASTNode	rarrow;

/* There are more */ 
nonterminal empty; 

/* Precedences */

precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LEQ, LT, EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left ISVOID;
precedence left AT;
precedence left DOT;


// ====   Grammar ======

// Cool manual:     program ::= class;+
// A program is a sequence of one or more classes, 
//   separated by semicolons

// ErrorReport report
// Symbol table of Clazzes table

program ::= classes:cs	{: System.out.println("Root encountered"); RESULT = new RootNode("Object",cs); :}
 ; 

classes ::= classes:cs clazz:c SEMI	{: cs.add(c); RESULT = cs; :}
        |   clazz:c SEMI	{: RESULT = new ArrayList<ClassNode>(); RESULT.add(c); :}
	|   error SEMI 
	;

// Cool manual:   class ::= class TYPE [inherits TYPE] { feature;* }
// 


// TODO: Machinery for adding classes
clazz	  ::=	CLASS TYPEID:t optParent:p LBRACE features:fs RBRACE 	{: RESULT = new ClassNode("Object",(String) t,fs,p); :}
	  ;

optParent ::=   INHERITS TYPEID:t	{: RESULT = t; :}
	  |	empty 			{: RESULT = "Object"; :}
	  ; 
features  ::=   method:m features:fs	{: fs.add(m); RESULT = fs; :}
		| field:f features:fs	{: fs.add(f); :}
		| empty	{: RESULT = new ArrayList<ASTNode>(); :}
		;

method ::= ID:i LPAREN formals:fos RPAREN COLON TYPEID:t LBRACE expr:e exprs:es RBRACE SEMI	{: es.add(e); RESULT = new MethodNode((String) t,es,fos, (String) i); :}
		;

field ::= 	ID:i COLON TYPEID:t ASSIGN expr:e SEMI	{: RESULT = new AssignNode(t,e,i); :}
		| ID:i COLON TYPEID:t SEMI		{: RESULT = new VarNode(t,i); :}
		;

formal ::=	ID:i COLON TYPEID:t formals:fs = {: fs.put(i,t); RESULT = fs; :}
		;

formals ::=	COMMA ID:i COLON TYPEID:t formals:fs	{: fs.put(i,t); RESULT = fs; :}
		| empty	{: RESULT = new TreeMap<String,String>(); :}
		;

assignment ::=	ID:i COLON TYPEID:t ASSIGN expr:e	{: RESULT = new AssignNode(t,e,i); :}
		;		
assignments ::=	COMMA assignment:a assignments:as	{: as.add(a); RESULT = as; :}
		| empty	{: RESULT = new ArrayList<AssignNode>(); :}
		;

rarrow ::= 	ID:i COLON TYPEID:t RIGHTARROW expr:e SEMI	{: RESULT = new LetNoInitNode("Object",i,e,t); :}
		;

rarrows ::= 	rarrow:r SEMI rarrows:rs {: rs.add(r); RESULT = rs; :}
		| empty	{: RESULT = new ArrayList<ASTNode>(); :}
		;

binop ::= 	PLUS:p 	{: RESULT = p; :}
		| MINUS:m	{: RESULT = m; :}
		| DIV:d	{: RESULT = d; :}
		| TIMES:t 	{: RESULT = t; :}
		| LT:l	{: RESULT = l; :}
		| LEQ:l	{: RESULT = l; :}
		| EQ:e	{: RESULT = e; :}
		;

unop ::=	NEG:n	{: RESULT = n; :}
		| NOT:n	{: RESULT = n; :}
		;


exprs ::=	COMMA expr:e exprs:es {: es.add(e); RESULT = es; :}
		| empty	{: RESULT = new ArrayList<ASTNode>(); :}
		;

semiexpr ::=	expr:e SEMI semiexpr:s	{: s.add(e) ; RESULT = s; :}
		| expr:e SEMI	{: RESULT = new ArrayList<ASTNode>(); RESULT.add(e); :}
		;

let ::=		LET ID:i COLON TYPEID:t IN expr:e	{: RESULT = new LetNoInitNode("Object",i,e,t); :}

		| LET ID:i COLON TYPEID:t ASSIGN expr:e1 IN expr:e2	{: RESULT = new LetInitNode("Object",e1,i,e2,t); :}	
	
		| LET ID:i COLON TYPEID:t innerLet:il	{: RESULT = new LetNoInitNode("Object",i,il,t); :}

		| LET ID:i COLON TYPEID:t ASSIGN expr:e1 innerLet:il	{: RESULT = new LetInitNode("Object",e1,i,il,t); :}	
		;

innerLet ::=	ID:i COLON TYPEID:t IN expr:e	{: RESULT = new LetNoInitNode("Object",i,e,t); :}

		| ID:i COLON TYPEID:t ASSIGN expr:e1 IN expr:e2	{: RESULT = new LetInitNode("Object",e1,i,e2,t); :}

		| ID:i COLON TYPEID:t innerLet:il	{: RESULT = new LetNoInitNode("Object",i,il,t); :}

		| ID:i COLON TYPEID:t ASSIGN expr:e1 innerLet:il	{: RESULT = new LetInitNode("Object",e1,t,il,t); :}
		;


expr ::=	ID:i ASSIGN expr:e	{: RESULT = new AssignNode("Object",e,i); :}
		| expr:e1 DOT ID:i LPAREN expr:e2 exprs:es RPAREN	{: es.add(e2); RESULT = new DispatchNode("Object",es,i); :}
		| expr:e DOT ID:i LPAREN RPAREN	{: ArrayList<ASTNode> empList = new ArrayList<ASTNode>(); RESULT = new DispatchNode("Object",empList,i); :}
		

		| expr:e1 AT TYPEID:t DOT ID:i LPAREN expr:e2 exprs:es RPAREN	{: es.add(e1); es.add(e2); RESULT = new StaticDispatchNode("local",es,i,t); :}

		| expr:e AT TYPEID:t DOT ID:i LPAREN RPAREN	{: ArrayList<ASTNode> es = new ArrayList<ASTNode>(); es.add(e); RESULT = new StaticDispatchNode("local",es,i,t); :}


		| ID:i LPAREN expr:e exprs:es RPAREN	{: es.add(e); RESULT = new DispatchNode("local",es,i); :}
		| ID:i LPAREN RPAREN	{: ArrayList<ASTNode> empList = new ArrayList<ASTNode>(); RESULT = new DispatchNode("local",empList,i); :}
		| IF expr:i THEN expr:t ELSE expr:e FI	{: RESULT = new CondNode("Object",i,t,e); :}
		| LBRACE semiexpr:s RBRACE	{: RESULT = new SequenceNode("Object",s); :}
		| WHILE expr:e1 LOOP expr:e2 exprs:es POOL	{: es.add(e2); RESULT = new LoopNode("Object",e1,es); :}
		| let:l	{: RESULT = l; :}
		| CASE expr:e OF rarrows:rs ESAC	{: RESULT = new CaseNode("Object",rs); :}
		| NEW TYPEID:t	{: RESULT = new NewTypeNode(t); :}
		| ISVOID expr:e	{: RESULT = new IsVoidNode("Bool",e); :}
		| expr:le binop:b expr:lr 	{: String s; if ((b.sym == sym.EQ) || (b.sym == sym.LEQ) || (b.sym == sym.LT)){ s = "Bool";} else{ s = "Int"; } ; RESULT = new BinOpNode(s,le,lr,b); :}
		| unop:u expr:e	{: String s; if (u.sym == sym.NOT){ s = "Bool";} else{ s = "Int"; } ; RESULT = new UnOpNode(s,e,u); :}
		| LPAREN expr:e RPAREN	{: RESULT = e; :}
		| ID:i	{: RESULT = new VarNode("Object",i); :}
		| INTLIT:i	{: RESULT = new IntConstNode("Int",i); :}
		| STRINGLIT:s	{: RESULT = new StringConstNode("String",s); :}
		| TRUE		{: RESULT = new BoolConstNode("Bool",true); :}
		| FALSE		{: RESULT = new BoolConstNode("Bool",false); :}
		;


// Cool manual: feature ::= ID( formal,* ): TYPE { expr }
//                      |   ID: TYPE [ :=  expr ]
//

// Cool manual: formal ::= ID : TYPE 


// Cool manual gives precedence (left associative except as noted)
// 1: . @ 
// 2: ~ 
// 3: isvoid 
// 4:  * / 
// 5: + -
// 6: <= < = (non-associative)
// 7: not 
// 8: := (right-associative)
// then control operators if, while, let, etc., 
// with "let" gobbling as much to the right as possible
//

empty ::= ;  