class Foo {

    fooInt: Int := 8;
    fooBar: Bar;

    getFooInt() : Int {
        {fooInt;}
    };

    getFooBar() : Bar {
        {fooBar;}
    };

    setFooInt(newInt: Int) : Int {
        {
            fooInt := newInt;
            fooInt;
        }
    };

    setFooBar(newBar: Bar) : Bar {
        {
            fooBar := newBar;
            fooBar;
        }
    };

};

class Bar inherits Foo {
    barInt: Int := 12;

    getBarInt() : Int {
        {barInt;}
    };

    setBarInt(newInt: Int) : Int {
        {
            barInt := newInt;
            barInt;
        }
    };

};

class Main inherits IO {

    testObject : Object := (new Object);
    testBar : Bar := (new Bar);
    testFoo: Foo := (new Foo);
    testIO : IO := (new IO);
    testString : String := "sameTest";
    testInt: Int := 5;
    testBool: Bool := true;
    equals : Bool := false;

    main() : IO {

        {
            ( let testLetObject : Object in
                {
                    testLetObject := testObject.copy();
                    equals := (testObject = testLetObject);

                    if equals then
                        out_string("incorrectly recognized Objects as the same\n")
                    else
                        out_string("correctly flagged Objects as not the same\n")
                    fi;
                }
            );

            ( let testLetIO : IO in
                {
                    testLetIO := testIO.copy();
                    equals := (testIO = testLetIO);

                    if equals then
                        out_string("incorrectly recognized IOs as the same\n")
                    else
                        out_string("correctly flagged IOs as not the same\n")
                    fi;
                }
            );

            ( let testLetInt : Int in
                {
                    testLetInt := testInt.copy();
                    equals := (testInt = testLetInt);

                    if equals then
                        out_string("correctly recognized Ints as the same\n")
                    else
                        out_string("incorrectly flagged Ints as not the same\n")
                    fi;

                    testLetInt := 10;
                    equals := (testInt = testLetInt);

                    if equals then
                        out_string("incorrectly recognized Ints as the same\n")
                    else
                        out_string("correctly flagged Ints as not the same\n")
                    fi;
                }
            );

            ( let testLetBool : Bool in
                {
                    testLetBool := testBool.copy();
                    equals := (testBool = testLetBool);

                    if equals then
                        out_string("correctly recognized Bools as the same\n")
                    else
                        out_string("incorrectly flagged Bools as not the same\n")
                    fi;

                    testLetBool := false;
                    equals := (testBool = testLetBool);
                    
                    if equals then
                        out_string("incorrectly recognized Bools as the same\n")
                    else
                        out_string("correctly flagged Bools as not the same\n")
                    fi;
                }
            );

            ( let testLetString : String in
                {
                    testLetString := testString.copy();
                    equals := (testString = testLetString);

                    if equals then
                        out_string("correctly recognized Strings as the same\n")
                    else
                        out_string("incorrectly flagged Strings as not the same\n")
                    fi;

                    testLetString := "diffTest";
                    equals := (testString = testLetString);

                    if equals then
                        out_string("incorrectly recognized Strings as the same\n")
                    else
                        out_string("correctly flagged Strings as not the same\n")
                    fi;
                }
            );

            ( let testLetFoo : Foo in
                {
                    testFoo.setFooBar(testBar);
                    testLetFoo := testFoo.copy();
                    equals := (testFoo = testLetFoo);

                    if equals then
                        out_string("incorrectly recognized Foos as the same\n")
                    else
                        out_string("correctly flagged Foos as not the same\n")
                    fi;

                    equals := (testFoo.getFooInt() = testLetFoo.getFooInt());

                    if equals then
                        out_string("correctly recognized Foo Ints as the same\n")
                    else
                        out_string("incorrectly flagged Foo Ints as not the same\n")
                    fi; 

                    (*Should still be the same here because the pointers of nested objects are copied*)
                    testLetFoo.setFooInt(10);
                    equals := (testFoo.getFooInt() = testLetFoo.getFooInt());

                    out_string("new testLetFoo fooInt:\n");
                    out_int(testLetFoo.getFooInt());
                    out_string("\n");

                    if equals then
                        out_string("correctly recognized Foo Ints as still the same\n")
                    else
                        out_string("incorrectly flagged Foo Ints as no longer the same\n")
                    fi;

                    equals := (testFoo.getFooBar() = testLetFoo.getFooBar());
                    if equals then
                        out_string("correctly recognized Foo Bars as the same\n")
                    else
                        out_string("incorrectly flagged Foo Bars as not the same\n")
                    fi; 

                    testFoo.setFooBar(new Bar);

                    if equals then
                        out_string("correctly recognized Foo Bars as still the same\n")
                    else
                        out_string("incorrectly flagged Foo Bars as no longer the same\n")
                    fi;                     

                }
            );
                    
        }
    };

};
