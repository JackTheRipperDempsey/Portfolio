class Foo {

};

class Bar inherits Foo {

};

class Main inherits IO {

    testObject : Object := (new Object);
    testFoo : Foo := (new Foo); 
    testString : String := "sameTest";
    testInt: Int := 5;
    testBool: Bool := true;
    equals : Bool := false;

    main() : IO {

        {
            ( let testLetObject : Object in
                {
                    testLetObject := testObject;
                    equals := (testObject = testLetObject);

                    if equals then
                        out_string("correctly recognized Objects as the same\n")
                    else
                        out_string("incorrectly flagged Objects as not the same\n")
                    fi;

                    testLetObject := (new Object);
                    equals := (testObject = testLetObject);

                    if equals then
                        out_string("incorrectly recognized Objects as the same\n")
                    else
                        out_string("correctly flagged Objects as not the same\n")
                    fi;
                }
            );

            ( let testLetFoo : Foo in
                {
                    testLetFoo := testFoo;
                    equals := (testFoo = testLetFoo);

                    if equals then
                        out_string("correctly recognized Foos as the same\n")
                    else
                        out_string("incorrectly flagged Foos as not the same\n")
                    fi;

                    testLetFoo := (new Foo);
                    equals := (testFoo = testLetFoo);

                    if equals then
                        out_string("incorrectly recognized Foos as the same\n")
                    else
                        out_string("correctly flagged Foos as not the same\n")
                    fi;
                }
            );

            ( let testLetBar : Foo in
                {
                    testLetBar := (new Bar);
                    equals := (testFoo = testLetBar);

                    if equals then
                        out_string("incorrectly recognized Foo and Bar as the same\n")
                    else
                        out_string("correctly flagged Foo and Bar as not the same\n")
                    fi;

                    testFoo := testLetBar;
                    equals := (testFoo = testLetBar);

                    if equals then
                        out_string("correctly recognized Foo set to pointer for subclass Bar as same as original pointer for Bar as the same\n")
                    else
                        out_string("incorrectly flagged Foo set to pointer for subclass Bar as same as original pointer for Bar as not the same\n")
                    fi;
                }
            );            

            ( let testLetString : String in
                {
                    testLetString := "sameTest";
                    equals := (testString = testLetString);

                    if equals then
                        out_string("correctly recognized Strings as the same\n")
                    else
                        out_string("incorrectly flagged Strings as not the same\n")
                    fi;

                    testLetString := "diffTest";
                    equals := (testString = testLetString);

                    if equals then
                        out_string("incorrectly recognized Strings as the same\n")
                    else
                        out_string("correctly flagged Strings as not the same\n")
                    fi;
                }
            );

            ( let testLetInt : Int in
                {
                    testLetInt := 5;
                    equals := (testInt = testLetInt);

                    if equals then
                        out_string("correctly recognized Ints as the same\n")
                    else
                        out_string("incorrectly flagged Ints as not the same\n")
                    fi;

                    testLetInt := 2;
                    equals := (testInt = testLetInt);

                    if equals then
                        out_string("incorrectly recognized Ints as the same\n")
                    else
                        out_string("correctly flagged Ints as not the same\n")
                    fi;
                }
            );

            ( let testLetBool : Bool in
                {
                    testLetBool := true;
                    equals := (testBool = testLetBool);

                    if equals then
                        out_string("correctly recognized Bools as the same\n")
                    else
                        out_string("incorrectly flagged Bools as not the same\n")
                    fi;

                    testLetBool := false;
                    equals := (testBool = testLetBool);

                    if equals then
                        out_string("incorrectly recognized Bools as the same\n")
                    else
                        out_string("correctly flagged Bools as not the same\n")
                    fi;
                }
            );                               
        }
    };

};
